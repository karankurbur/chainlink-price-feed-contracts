// SPDX-License-Identifier: MIT
pragma solidity >=0.8.28;

import "forge-std/src/Test.sol";
import "../src/ChainlinkPriceFeedv3.sol";
import "../tests/mocks/MockChainlinkVerifier.sol";

contract ChainlinkPriceFeedTest is Test {
    ChainlinkPriceFeed public priceFeed;
    MockChainlinkVerifier public verifier;

    address constant PAIR_TOKEN_ADDRESS = address(0x1);
    address constant USDC_TOKEN_ADDRESS = address(0x2);
    bytes32 constant FEED_ID = 0x000365f820b0633946b78232bb91a97cf48100c426518e732465c3a050edb9f1;
    string constant PAIR_NAME = "WLD/USD";

    function setUp() public {
        verifier = new MockChainlinkVerifier();
        priceFeed = new ChainlinkPriceFeed(
            PAIR_TOKEN_ADDRESS, USDC_TOKEN_ADDRESS, payable(address(verifier)), FEED_ID, PAIR_NAME, 18
        );
    }

    function testUpdatePriceData() public {
        bytes memory verifyReportRequest =
            hex"00096cdfc09d2c952582fc68539499c5b496b5123c7359bc339d3d4cd7be87510000000000000000000000000000000000000000000000000000000000915966000000000000000000000000000000000000000000000000000000040000000100000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000030001010001000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000120000365f820b0633946b78232bb91a97cf48100c426518e732465c3a050edb9f100000000000000000000000000000000000000000000000000000000680ae48800000000000000000000000000000000000000000000000000000000680ae4880000000000000000000000000000000000000000000000000000a44528892a3b000000000000000000000000000000000000000000000000004be1e0ad1e50c900000000000000000000000000000000000000000000000000000000683271880000000000000000000000000000000000000000000000000cc02eae00c52e940000000000000000000000000000000000000000000000000cbf04a53cf025380000000000000000000000000000000000000000000000000cc1ad66495cd7640000000000000000000000000000000000000000000000000000000000000006dbc24c8c821bddecb947823c39e60d6f6064f167735a90753a79da2447b8052ceed0d85ccd06013c4c5cb2feb6cd8150b073adb11375e26b82b59b25adabd6a758f4204a7d977f4efdf53c11aea6eae86103842cb3f79eca78d874a5a0771cefc162de5aa13162905cd148fffa61d37c53e2f972347128186a984a0c14e09dd81b41297e1b2706ecc40c2249525f3dec6a01064e9834c2c5c506d07b7becb5e2cb39ed131914bce4f958c36fc44a1c46754ebbddbf3161437661d2d9ded98b3100000000000000000000000000000000000000000000000000000000000000061349a2e88713e3801b5f17c962057d5cd306f74bb9459c0397f15fbac8c152b14b639e1e50e0a672bf2695729260ead0f501c419b784d4a4de4e22c31552c4436ad10a359e9945cd88c627e95045fbc01cb6ba9ec8a00636d4ad2e8bddcc182f5acbc3e7c7a738664a36fcab34fb1bf54c82f13305372720d4dadd27d1748f563f7316d4d78c9e73b1a0c5fd84ca81ca8e956ce9c6475ab6ac3ae9186c03bf1769d408993f2c0b157541db06385b89b5bb49f2dd9b8cf650a371c402ada178d8";
        bytes memory parameterPayload = "";

        // Set the block timestamp between expireAt and validFromTimestamp
        vm.warp(1_745_544_389);

        priceFeed.updatePriceData(verifyReportRequest, parameterPayload);

        // Fetch the current price
        (, int256 answer,,,) = priceFeed.latestRoundData();
        // 138.12
        assertEq(answer, 918_981_748_278_172_600);
    }

    function testInvalidFeedId() public {
        bytes memory verifyReportRequest =
            hex"00096cdfc09d2c952582fc68539499c5b496b5123c7359bc339d3d4cd7be87510000000000000000000000000000000000000000000000000000000000915966000000000000000000000000000000000000000000000000000000040000000100000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000030001010001000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000120000365f820b0633946b78232bb91a97cf48100c426518e732465c3a050edb9f100000000000000000000000000000000000000000000000000000000680ae48800000000000000000000000000000000000000000000000000000000680ae4880000000000000000000000000000000000000000000000000000a44528892a3b000000000000000000000000000000000000000000000000004be1e0ad1e50c900000000000000000000000000000000000000000000000000000000683271880000000000000000000000000000000000000000000000000cc02eae00c52e940000000000000000000000000000000000000000000000000cbf04a53cf025380000000000000000000000000000000000000000000000000cc1ad66495cd7640000000000000000000000000000000000000000000000000000000000000006dbc24c8c821bddecb947823c39e60d6f6064f167735a90753a79da2447b8052ceed0d85ccd06013c4c5cb2feb6cd8150b073adb11375e26b82b59b25adabd6a758f4204a7d977f4efdf53c11aea6eae86103842cb3f79eca78d874a5a0771cefc162de5aa13162905cd148fffa61d37c53e2f972347128186a984a0c14e09dd81b41297e1b2706ecc40c2249525f3dec6a01064e9834c2c5c506d07b7becb5e2cb39ed131914bce4f958c36fc44a1c46754ebbddbf3161437661d2d9ded98b3100000000000000000000000000000000000000000000000000000000000000061349a2e88713e3801b5f17c962057d5cd306f74bb9459c0397f15fbac8c152b14b639e1e50e0a672bf2695729260ead0f501c419b784d4a4de4e22c31552c4436ad10a359e9945cd88c627e95045fbc01cb6ba9ec8a00636d4ad2e8bddcc182f5acbc3e7c7a738664a36fcab34fb1bf54c82f13305372720d4dadd27d1748f563f7316d4d78c9e73b1a0c5fd84ca81ca8e956ce9c6475ab6ac3ae9186c03bf1769d408993f2c0b157541db06385b89b5bb49f2dd9b8cf650a371c402ada178d8";
        bytes memory parameterPayload = "";

        bytes32 invalidFeedId = 0x1103d338ea2ac3be9e026033b1aa601673c37bab5e13851c59966f9f820754d6;

        ChainlinkPriceFeed invalidPriceFeedId = new ChainlinkPriceFeed(
            PAIR_TOKEN_ADDRESS, USDC_TOKEN_ADDRESS, payable(address(verifier)), invalidFeedId, PAIR_NAME, 18
        );
        // Set the block timestamp between expireAt and validFromTimestamp
        vm.warp(1_745_544_389);

        // Expect revert due to feed ID mismatch
        vm.expectRevert(ChainlinkPriceFeed.FeedIdMismatch.selector);
        invalidPriceFeedId.updatePriceData(verifyReportRequest, parameterPayload);
    }

    function testExpiredData() public {
        bytes memory verifyReportRequest =
            hex"00096cdfc09d2c952582fc68539499c5b496b5123c7359bc339d3d4cd7be87510000000000000000000000000000000000000000000000000000000000915966000000000000000000000000000000000000000000000000000000040000000100000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000030001010001000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000120000365f820b0633946b78232bb91a97cf48100c426518e732465c3a050edb9f100000000000000000000000000000000000000000000000000000000680ae48800000000000000000000000000000000000000000000000000000000680ae4880000000000000000000000000000000000000000000000000000a44528892a3b000000000000000000000000000000000000000000000000004be1e0ad1e50c900000000000000000000000000000000000000000000000000000000683271880000000000000000000000000000000000000000000000000cc02eae00c52e940000000000000000000000000000000000000000000000000cbf04a53cf025380000000000000000000000000000000000000000000000000cc1ad66495cd7640000000000000000000000000000000000000000000000000000000000000006dbc24c8c821bddecb947823c39e60d6f6064f167735a90753a79da2447b8052ceed0d85ccd06013c4c5cb2feb6cd8150b073adb11375e26b82b59b25adabd6a758f4204a7d977f4efdf53c11aea6eae86103842cb3f79eca78d874a5a0771cefc162de5aa13162905cd148fffa61d37c53e2f972347128186a984a0c14e09dd81b41297e1b2706ecc40c2249525f3dec6a01064e9834c2c5c506d07b7becb5e2cb39ed131914bce4f958c36fc44a1c46754ebbddbf3161437661d2d9ded98b3100000000000000000000000000000000000000000000000000000000000000061349a2e88713e3801b5f17c962057d5cd306f74bb9459c0397f15fbac8c152b14b639e1e50e0a672bf2695729260ead0f501c419b784d4a4de4e22c31552c4436ad10a359e9945cd88c627e95045fbc01cb6ba9ec8a00636d4ad2e8bddcc182f5acbc3e7c7a738664a36fcab34fb1bf54c82f13305372720d4dadd27d1748f563f7316d4d78c9e73b1a0c5fd84ca81ca8e956ce9c6475ab6ac3ae9186c03bf1769d408993f2c0b157541db06385b89b5bb49f2dd9b8cf650a371c402ada178d8";
        bytes memory parameterPayload = "";

        // Set the block timestamp after the expiration
        vm.warp(1_748_136_391);

        // Expect revert due to expired data
        vm.expectRevert(ChainlinkPriceFeed.PriceDataInvalid.selector);
        priceFeed.updatePriceData(verifyReportRequest, parameterPayload);
    }

    function testOldPriceUpdate() public {
        bytes memory verifyReportRequest =
            hex"00096cdfc09d2c952582fc68539499c5b496b5123c7359bc339d3d4cd7be87510000000000000000000000000000000000000000000000000000000000915966000000000000000000000000000000000000000000000000000000040000000100000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000030001010001000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000120000365f820b0633946b78232bb91a97cf48100c426518e732465c3a050edb9f100000000000000000000000000000000000000000000000000000000680ae48800000000000000000000000000000000000000000000000000000000680ae4880000000000000000000000000000000000000000000000000000a44528892a3b000000000000000000000000000000000000000000000000004be1e0ad1e50c900000000000000000000000000000000000000000000000000000000683271880000000000000000000000000000000000000000000000000cc02eae00c52e940000000000000000000000000000000000000000000000000cbf04a53cf025380000000000000000000000000000000000000000000000000cc1ad66495cd7640000000000000000000000000000000000000000000000000000000000000006dbc24c8c821bddecb947823c39e60d6f6064f167735a90753a79da2447b8052ceed0d85ccd06013c4c5cb2feb6cd8150b073adb11375e26b82b59b25adabd6a758f4204a7d977f4efdf53c11aea6eae86103842cb3f79eca78d874a5a0771cefc162de5aa13162905cd148fffa61d37c53e2f972347128186a984a0c14e09dd81b41297e1b2706ecc40c2249525f3dec6a01064e9834c2c5c506d07b7becb5e2cb39ed131914bce4f958c36fc44a1c46754ebbddbf3161437661d2d9ded98b3100000000000000000000000000000000000000000000000000000000000000061349a2e88713e3801b5f17c962057d5cd306f74bb9459c0397f15fbac8c152b14b639e1e50e0a672bf2695729260ead0f501c419b784d4a4de4e22c31552c4436ad10a359e9945cd88c627e95045fbc01cb6ba9ec8a00636d4ad2e8bddcc182f5acbc3e7c7a738664a36fcab34fb1bf54c82f13305372720d4dadd27d1748f563f7316d4d78c9e73b1a0c5fd84ca81ca8e956ce9c6475ab6ac3ae9186c03bf1769d408993f2c0b157541db06385b89b5bb49f2dd9b8cf650a371c402ada178d8";
        bytes memory parameterPayload = "";

        // // Set the block timestamp between expireAt and validFromTimestamp
        vm.warp(1_745_544_389);

        // First update to set the initial price
        priceFeed.updatePriceData(verifyReportRequest, parameterPayload);

        bytes memory verifierOldResponse =
            hex"000365f820b0633946b78232bb91a97cf48100c426518e732465c3a050edb9f10000000000000000000000000000000000000000000000000000000067f59fa70000000000000000000000000000000000000000000000000000000067f59fa70000000000000000000000000000000000000000000000000000c726cd99c87400000000000000000000000000000000000000000000000000686b8150c7138600000000000000000000000000000000000000000000000000000000681d2ca7000000000000000000000000000000000000000000000000088fc0239fa7b3ac000000000000000000000000000000000000000000000000088e767418c230000000000000000000000000000000000000000000000000000890fef6a189ead8";
        verifier.setReturnValue(verifierOldResponse);

        vm.warp(1_744_150_439);
        uint32 oldTimestamp = 1_745_544_389;
        uint32 newTimestamp = 1_744_150_439;

        // Expecting a revert due to old price update
        vm.expectRevert(
            abi.encodeWithSelector(ChainlinkPriceFeed.OldPriceFeedUpdate.selector, oldTimestamp, newTimestamp)
        );
        priceFeed.updatePriceData(verifyReportRequest, parameterPayload);
    }

    function testInvalidReportVersion() public {
        // Define the components of the report
        bytes32 one = 0x000365f820b0633946b78232bb91a97cf48100c426518e732465c3a050edb9f1;
        bytes32 two = 0x0000000000000000000000000000000000000000000000000000000067e5e3eb;
        bytes32 three = 0x0000000000000000000000000000000000000000000000000000000067e5e3eb;

        // Define the rest of the report data
        uint16 reportVersion = 4; // Incorrect version
        uint32 validFromTimestamp = 1_744_415_339;
        uint32 observationsTimestamp = 1_744_415_340;
        uint32 expiresAt = 1_745_711_340;
        int192 price = 138_121_629_721_886_300_000; // Example price

        // Encode the report data
        bytes memory reportData = abi.encodePacked(
            bytes2(reportVersion), // Encode the version as two bytes
            validFromTimestamp,
            observationsTimestamp,
            expiresAt,
            price
        );

        // Encode the entire verifyReportRequest
        bytes memory verifyReportRequest = abi.encode([one, two, three], reportData);

        // Set the block timestamp between expireAt and validFromTimestamp
        vm.warp(1_745_544_389);

        // Expect revert due to invalid report version
        vm.expectRevert(abi.encodeWithSelector(ChainlinkPriceFeed.InvalidPriceFeedVersion.selector, uint16(4)));
        priceFeed.updatePriceData(verifyReportRequest, "");
    }
}
